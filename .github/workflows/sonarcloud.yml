name: SonarCloud
on:
  push:
    paths:
      - '**.cs'
      - '**.yml'
  pull_request:
    paths:
      - '**.cs'
      - '**.yml'
    types: [opened, synchronize, reopened]
jobs:
  check-registry-secrets:
   name: Check if container registry information was set on secrets
   runs-on: ubuntu-latest
   outputs:
     have_secrets: ${{ steps.setvar.outputs.have_secrets }}
   steps:
     - id: setvar
       run: |
         if [[ "${{ secrets.SONAR_TOKEN }}" != "" ]]; \
         then
           echo "Secrets to use a container registry were configured in the repo"
           echo "::set-output name=have_secrets::true"
         else
           echo "Secrets to use a container registry were not configured in the repo"
           echo "::set-output name=have_secrets::false"
         fi
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Set MemberApiKey
        id: setmemberapikey
        shell: bash
        run: |
          if [ "$MEMBER_API_KEY" != "" ]; then
            dotnet user-secrets set "MemberApiKey" "$MEMBER_API_KEY" --project src/jiraF.Member.API/
          else
            dotnet user-secrets set "MemberApiKey" "12345testApiKey" --project src/jiraF.Member.API/
          fi
        env:
          MEMBER_API_KEY: ${{ secrets.MEMBER_API_KEY }}
      - name: Set RABBITMQ_DEFAULT_USER
        id: setrabbituser
        shell: bash
        run: |
          dotnet user-secrets set "RABBITMQ_DEFAULT_USER" "CI_TESTS" --project src/jiraF.Member.API/
      - name: Set RABBITMQ_DEFAULT_PASS
        id: setrabbitpass
        shell: bash
        run: |
          dotnet user-secrets set "RABBITMQ_DEFAULT_PASS" "CI_TESTS" --project src/jiraF.Member.API/
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          dotnet tool install --global dotnet-coverage
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"KurnakovMaksim_jiraF-member" /o:"kurnakovmaksim" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet restore
          dotnet build --no-restore
          dotnet test --no-build --verbosity normal
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"